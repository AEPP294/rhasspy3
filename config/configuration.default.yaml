programs:
  asr:
    vosk:
      command: |
        script/raw2text ${model}
      adapter: |
        asr_adapter_raw2text.py
      template_args:
        model: "share/vosk-model-small-en-us-0.15"
    vosk.client:
      command: |
        client_unix_socket.py var/run/vosk.socket
    coqui-stt:
      command: |
        script/raw2text ${model}
      adapter: |
        asr_adapter_raw2text.py
      template_args:
        model: "share/english_v1.0.0-large-vocab"
    coqui-stt.client:
      command: |
        client_unix_socket.py var/run/coqui-stt.socket
    pocketsphinx:
      command: |
        script/raw2text ${model}
      adapter: |
        asr_adapter_raw2text.py
      template_args:
        model: "share/en-us_pocketsphinx-cmu"
    pocketsphinx.client:
      command: |
        client_unix_socket.py var/run/pocketsphinx.socket
    whisper:
      command: |
        script/wav2text --language ${language} ${model} {wav_file}
      adapter: |
        asr_adapter_wav2text.py
      template_args:
        language: "en"
        model: "tiny.en"
    whisper.client:
      command: |
        client_unix_socket.py var/run/whisper.socket
    whisper-cpp:
      command: |
        script/wav2text ${model} {wav_file}
      adapter: |
        asr_adapter_wav2text.py
      template_args:
        model: "share/ggml-tiny.en.bin"
    whisper-cpp.client:
      command: |
        client_unix_socket.py var/run/whisper-cpp.socket
    faster-whisper.client:
      command: |
        client_unix_socket.py var/run/faster-whisper.socket
  tts:
    larynx2:
      command: |
        bin/larynx --model share/en-us-blizzard_lessac-medium.onnx --output_file -
      adapter: |
        tts_adapter_text2wav.py
    larynx2.client:
      command: |
        client_unix_socket.py var/run/larynx2.socket
    espeak-ng:
      command: |
        espeak-ng -v en-us --stdin -w ${temp_file}
      adapter: |
        tts_adapter_text2wav.py --temp_file
    flite:
      command: |
        flite -voice ${voice} -o ${temp_file}
      template_args:
        voice: "cmu_us_slt"
      adapter: |
        tts_adapter_text2wav.py --temp_file
    festival:
      command: |
        text2wave -o ${temp_file} -eval (voice_${voice})
      template_args:
        voice: "cmu_us_slt_arctic_hts"
      adapter: |
        tts_adapter_text2wav.py --temp_file
    coqui-tts:
      command: |
        tts_adapter_http.py ${url} --param speaker_id ${speaker_id}
      template_args:
        url: "http://localhost:5002/api/tts"
        speaker_id: ""
    marytts:
      command: |
        bin/marytts.py ${url} ${voice}
      template_args:
        url: "http://localhost:59125/process"
        voice: "cmu-slt-hsmm"
      adapter: |
        tts_adapter_text2wav.py
    mimic3.client:
      command: |
        client_unix_socket.py var/run/mimic3.socket
  vad:
    silero:
      command: |
        script/speech_prob share/silero_vad.onnx
      adapter: |
        vad_adapter_raw.py --rate 16000 --width 2 --channels 1 --samples-per-chunk 512
    webrtcvad:
      command: |
        script/speech_prob 3
      adapter: |
        vad_adapter_raw.py --rate 16000 --width 2 --channels 1 --samples-per-chunk 480
    energy:
      command: |
        bin/energy_speech_prob.py --threshold 300 --width 2 --samples-per-chunk 1024
      adapter: |
        vad_adapter_raw.py --rate 16000 --width 2 --channels 1 --samples-per-chunk 1024
  mic:
    arecord:
      command: |
        arecord -q -r 16000 -c 1 -f S16_LE -t raw -
      adapter: |
        mic_adapter_raw.py --samples-per-chunk 1024 --rate 16000 --width 2 --channels 1
    pyaudio:
      command: |
        script/events
    sounddevice:
      command: |
        script/events
    gstreamer_udp:
      command: |
        gst-launch-1.0 -v udpsrc address=${address} port=${port} ! rawaudioparse use-sink-caps=false format=pcm pcm-format=${format} sample-rate=${rate} num-channels=${channels} ! audioconvert ! audioresample ! volume volume=3.0 ! level ! fdsink fd=1 sync=false
      template_args:
        format: s16le
        rate: 16000
        channels: 1
        address: "0.0.0.0"
        port: 5000
      adapter: |
        mic_adapter_raw.py --samples-per-chunk 1024 --rate 16000 --width 2 --channels 1
    udp_raw:
      command: |
        bin/udp_raw.py --host ${host} --port ${port}
      template_args:
        host: 0.0.0.0
        port: 5000
    test_opus:
      command: |
        gst-launch-1.0 -v udpsrc address=192.168.1.18 port=5000 caps="application/x-rtp" ! rtpopusdepay ! opusdec ! audioconvert ! audioresample ! audio/x-raw, rate=16000, format=S16LE, channels=1 ! fdsink fd=1 sync=false
      adapter: |
        mic_adapter_raw.py --samples-per-chunk 1024 --rate 16000 --width 2 --channels 1

  wake:
    precise-lite:
      command: |
        .venv/bin/python3 bin/precise.py share/hey_mycroft.tflite
      adapter: |
        wake_adapter_raw.py
    snowboy:
      command: |
        .venv/bin/python3 bin/snowboy_raw_text.py --model share/snowboy.umdl
      adapter: |
        wake_adapter_raw.py
    porcupine1:
      command: |
        .venv/bin/python3 bin/porcupine_raw_text.py --model porcupine_linux.ppn
      adapter: |
        wake_adapter_raw.py

  intent:
    regex:
      command: |
        bin/regex.py -i TurnOn 'turn on (the )?(?P<name>.+)'

  handle:
    repeat:
      command: |
        cat
      shell: true
      adapter: |
        handle_adapter_text.py
    home_assistant_conversation:
      command: |
        bin/converse.py ${url} ${token_file}
      template_args:
        url: "http://localhost:8123/api/conversation/process"
        token_file: "etc/token"
      adapter: |
        handle_adapter_text.py
    test:
      command: |
        name="$(jq -r .slots.name)"
        echo "Turned on ${name}."
      shell: true
      adapter: |
        handle_adapter_json.py

  snd:
    aplay:
      command: |
        aplay -q -r 22050 -f S16_LE -c 1 -t raw
      adapter: |
        snd_adapter_raw.py --rate 22050 --width 2 --channels 1
    udp_raw:
      command: |
        bin/udp_raw.py --host ${host} --port ${port}
      template_args:
        host: 127.0.0.1
        port: 5001


servers:
  asr:
    vosk:
      command: |
        script/server ${model}
      template_args:
        model: "share/vosk-model-small-en-us-0.15"
    coqui-stt:
      command: |
        script/server ${model}
      template_args:
        model: "share/english_v1.0.0-large-vocab"
    pocketsphinx:
      command: |
        script/server ${model}
      template_args:
        model: "share/en-us_pocketsphinx-cmu"
    whisper:
      command: |
        script/server --language ${language} --device ${device} ${model}
      template_args:
        language: "en"
        model: "tiny.en"
        device: "cpu"  # or cuda
    whisper-cpp:
      command: |
        script/server ${model}
      template_args:
        model: "share/ggml-tiny.en.bin"
    faster-whisper:
      command: |
        script/server --language ${language} --device ${device} ${model}
      template_args:
        language: "en"
        model: "share/tiny-int8"
        device: "cpu"  # or cuda
  tts:
    mimic3:
      command: |
        script/server --voice ${voice}
      template_args:
        voice: "en_US/ljspeech_low"
    larynx2:
      command: |
        script/server ${model}
      template_args:
        model: "share/en-us-blizzard_lessac-medium.onnx"

pipelines:
  default:
    mic:
      name: arecord
    wake:
      name: porcupine1
    vad:
      name: silero
    asr:
      name: vosk
    # intent:
    #   name: regex
    handle:
      name: repeat
    tts:
      name: larynx2
    snd:
      name: aplay
